/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    posts: Post;
    categories: Category;
    tags: Tag;
    authors: Author;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    posts: PostsSelect<false> | PostsSelect<true>;
    categories: CategoriesSelect<false> | CategoriesSelect<true>;
    tags: TagsSelect<false> | TagsSelect<true>;
    authors: AuthorsSelect<false> | AuthorsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt: string;
  enableWebP?: boolean | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts".
 */
export interface Post {
  id: number;
  title: string;
  /**
   * URL-friendly version of the title (e.g., "my-blog-post")
   */
  slug: string;
  /**
   * Brief summary of the post for previews and SEO
   */
  description: string;
  content: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Language of the post content
   */
  language: 'en' | 'fr';
  /**
   * Main image for the post
   */
  featuredImage?: (number | null) | Media;
  author: number | Author;
  category?: (number | null) | Category;
  tags?: (number | Tag)[] | null;
  status: 'draft' | 'published' | 'scheduled';
  /**
   * When the post should be published. Required for published and scheduled posts.
   */
  publishedDate?: string | null;
  seo?: {
    /**
     * SEO title (if different from post title)
     */
    metaTitle?: string | null;
    /**
     * SEO description for search engines
     */
    metaDescription?: string | null;
    /**
     * Comma-separated keywords for SEO
     */
    metaKeywords?: string | null;
    /**
     * Image for social media sharing (1200x630px recommended)
     */
    metaImage?: (number | null) | Media;
    /**
     * Canonical URL if this post exists elsewhere
     */
    canonicalUrl?: string | null;
    /**
     * Prevent search engines from indexing this post
     */
    noIndex?: boolean | null;
    /**
     * Prevent search engines from following links in this post
     */
    noFollow?: boolean | null;
    openGraph?: {
      /**
       * Open Graph title (if different from meta title)
       */
      title?: string | null;
      /**
       * Open Graph description (if different from meta description)
       */
      description?: string | null;
      /**
       * Open Graph image (1200x630px recommended)
       */
      image?: (number | null) | Media;
      type?: ('article' | 'website' | 'blog') | null;
    };
    twitter?: {
      card?: ('summary' | 'summary_large_image' | 'app' | 'player') | null;
      /**
       * Twitter card title (if different from meta title)
       */
      title?: string | null;
      /**
       * Twitter card description (if different from meta description)
       */
      description?: string | null;
      /**
       * Twitter card image (1200x630px for large image)
       */
      image?: (number | null) | Media;
      /**
       * Twitter handle of content creator (with @)
       */
      creator?: string | null;
      /**
       * Twitter handle of website (with @)
       */
      site?: string | null;
    };
    jsonSchema?: {
      /**
       * Enable JSON-LD structured data for this post
       */
      enabled?: boolean | null;
      schemaType?: ('Article' | 'BlogPosting' | 'NewsArticle' | 'TechArticle' | 'ScholarlyArticle') | null;
      /**
       * Article headline (if different from title)
       */
      headline?: string | null;
      /**
       * Alternative or subtitle
       */
      alternativeHeadline?: string | null;
      /**
       * Article word count (auto-calculated if left empty)
       */
      wordCount?: number | null;
      /**
       * Estimated reading time (e.g., "PT5M" for 5 minutes)
       */
      timeToRead?: string | null;
      /**
       * Section or category of the article
       */
      articleSection?: string | null;
      /**
       * Comma-separated keywords for schema
       */
      keywords?: string | null;
      publisher?: {
        /**
         * Publisher name (e.g., your company name)
         */
        name?: string | null;
        /**
         * Publisher logo (recommended: 600x60px)
         */
        logo?: (number | null) | Media;
        /**
         * Publisher website URL
         */
        url?: string | null;
      };
      /**
       * URL of the main entity page (usually the post URL)
       */
      mainEntityOfPage?: string | null;
      /**
       * Is this content free to access?
       */
      isAccessibleForFree?: boolean | null;
      isPartOf?: {
        /**
         * Name of the publication/blog
         */
        name?: string | null;
        /**
         * ISSN number if applicable
         */
        issn?: string | null;
      };
      /**
       * Custom JSON-LD schema (will be merged with auto-generated schema)
       */
      customSchema?: string | null;
    };
    /**
     * Define breadcrumb structure for rich snippets
     */
    breadcrumbs?:
      | {
          name: string;
          url: string;
          id?: string | null;
        }[]
      | null;
    /**
     * Add FAQ items for rich snippets in search results
     */
    faq?:
      | {
          question: string;
          answer: {
            root: {
              type: string;
              children: {
                type: any;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          id?: string | null;
        }[]
      | null;
    /**
     * For tutorial/how-to articles
     */
    howTo?: {
      /**
       * Enable How-To structured data
       */
      enabled?: boolean | null;
      /**
       * Name of the how-to guide
       */
      name?: string | null;
      /**
       * Description of what the guide accomplishes
       */
      description?: string | null;
      /**
       * Total time needed (e.g., "PT30M" for 30 minutes)
       */
      totalTime?: string | null;
      /**
       * Estimated cost with currency (e.g., "USD 50")
       */
      estimatedCost?: string | null;
      /**
       * Required supplies/materials
       */
      supply?:
        | {
            name: string;
            id?: string | null;
          }[]
        | null;
      /**
       * Required tools
       */
      tool?:
        | {
            name: string;
            id?: string | null;
          }[]
        | null;
      /**
       * How-to steps
       */
      step?:
        | {
            name: string;
            text: {
              root: {
                type: string;
                children: {
                  type: any;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            };
            image?: (number | null) | Media;
            /**
             * URL to detailed instructions for this step
             */
            url?: string | null;
            id?: string | null;
          }[]
        | null;
    };
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "authors".
 */
export interface Author {
  id: number;
  name: string;
  /**
   * URL-friendly version of the author name
   */
  slug: string;
  /**
   * Author biography
   */
  bio?: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Author profile picture
   */
  avatar?: (number | null) | Media;
  email?: string | null;
  /**
   * Author website URL
   */
  website?: string | null;
  social?: {
    /**
     * Twitter handle (without @)
     */
    twitter?: string | null;
    /**
     * LinkedIn profile URL
     */
    linkedin?: string | null;
    /**
     * GitHub username
     */
    github?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: number;
  name: string;
  /**
   * URL-friendly version of the category name
   */
  slug: string;
  /**
   * Brief description of this category
   */
  description?: string | null;
  /**
   * Hex color code for the category (e.g., #FF5733)
   */
  color?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags".
 */
export interface Tag {
  id: number;
  name: string;
  /**
   * URL-friendly version of the tag name
   */
  slug: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'posts';
        value: number | Post;
      } | null)
    | ({
        relationTo: 'categories';
        value: number | Category;
      } | null)
    | ({
        relationTo: 'tags';
        value: number | Tag;
      } | null)
    | ({
        relationTo: 'authors';
        value: number | Author;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  enableWebP?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts_select".
 */
export interface PostsSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  description?: T;
  content?: T;
  language?: T;
  featuredImage?: T;
  author?: T;
  category?: T;
  tags?: T;
  status?: T;
  publishedDate?: T;
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        metaKeywords?: T;
        metaImage?: T;
        canonicalUrl?: T;
        noIndex?: T;
        noFollow?: T;
        openGraph?:
          | T
          | {
              title?: T;
              description?: T;
              image?: T;
              type?: T;
            };
        twitter?:
          | T
          | {
              card?: T;
              title?: T;
              description?: T;
              image?: T;
              creator?: T;
              site?: T;
            };
        jsonSchema?:
          | T
          | {
              enabled?: T;
              schemaType?: T;
              headline?: T;
              alternativeHeadline?: T;
              wordCount?: T;
              timeToRead?: T;
              articleSection?: T;
              keywords?: T;
              publisher?:
                | T
                | {
                    name?: T;
                    logo?: T;
                    url?: T;
                  };
              mainEntityOfPage?: T;
              isAccessibleForFree?: T;
              isPartOf?:
                | T
                | {
                    name?: T;
                    issn?: T;
                  };
              customSchema?: T;
            };
        breadcrumbs?:
          | T
          | {
              name?: T;
              url?: T;
              id?: T;
            };
        faq?:
          | T
          | {
              question?: T;
              answer?: T;
              id?: T;
            };
        howTo?:
          | T
          | {
              enabled?: T;
              name?: T;
              description?: T;
              totalTime?: T;
              estimatedCost?: T;
              supply?:
                | T
                | {
                    name?: T;
                    id?: T;
                  };
              tool?:
                | T
                | {
                    name?: T;
                    id?: T;
                  };
              step?:
                | T
                | {
                    name?: T;
                    text?: T;
                    image?: T;
                    url?: T;
                    id?: T;
                  };
            };
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  description?: T;
  color?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags_select".
 */
export interface TagsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "authors_select".
 */
export interface AuthorsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  bio?: T;
  avatar?: T;
  email?: T;
  website?: T;
  social?:
    | T
    | {
        twitter?: T;
        linkedin?: T;
        github?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}